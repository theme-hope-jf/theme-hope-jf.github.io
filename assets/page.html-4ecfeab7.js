import{a3 as c,Z as l,_ as d,a1 as e,a2 as a,$ as n,a0 as o,a4 as r,a5 as t,D as p}from"./framework-61fc4e0a.js";const i={},h=t(`<h2 id="图标支持" tabindex="-1"><a class="header-anchor" href="#图标支持" aria-hidden="true">#</a> 图标支持</h2><p>你可以在页面的 frontmatter 中配置 <code>icon</code> 字段，填入对应图标的 FontClass 即可绑定图标到页面。</p><p>该图标会在导航栏，侧边栏，路径导航和标题中使用。</p><details class="hint-container details"><summary>例子</summary><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"><span style="color:#E06C75;">icon</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">home</span></span>
<span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"></span></code></pre></div></details>`,4),u={class:"hint-container info"},_=e("p",{class:"hint-container-title"},"相关信息",-1),m=e("h2",{id:"路径导航",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#路径导航","aria-hidden":"true"},"#"),a(" 路径导航")],-1),B=e("h2",{id:"文章信息展示",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文章信息展示","aria-hidden":"true"},"#"),a(" 文章信息展示")],-1),f=t('<h2 id="标题列表" tabindex="-1"><a class="header-anchor" href="#标题列表" aria-hidden="true">#</a> 标题列表</h2><p>在桌面模式下，文章的标题列表会自动显示在屏幕的右侧。(在移动视图下它们会放置在侧边栏里)</p><p>如果你不希望在桌面模式下显示右侧的标题列表，请在主题选项中设置 <code>toc: false</code>。</p><p>你也可以在特定页面的 frontmatter 中通过 <code>toc</code> 来指定它。</p><h2 id="贡献者与最后更新时间" tabindex="-1"><a class="header-anchor" href="#贡献者与最后更新时间" aria-hidden="true">#</a> 贡献者与最后更新时间</h2>',5),y=e("h2",{id:"上-下一篇链接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#上-下一篇链接","aria-hidden":"true"},"#"),a(" 上 / 下一篇链接")],-1),g=t(`<p>上一篇和下一篇文章的链接将会自动地根据当前页面的侧边栏的顺序来获取。你也可以通过主题选项或 frontmatter 来明确地重写或者禁用它:</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"><span style="color:#E06C75;">prev</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">./some-other-page</span></span>
<span class="line"><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"></span></code></pre></div><h2 id="评论" tabindex="-1"><a class="header-anchor" href="#评论" aria-hidden="true">#</a> 评论</h2>`,3),x=t(`<h2 id="自定义布局" tabindex="-1"><a class="header-anchor" href="#自定义布局" aria-hidden="true">#</a> 自定义布局</h2><p>默认情况下，每个 <code>*.md</code> 文件将会被渲染在一个 <code>&lt;div class=&quot;page&quot;&gt;</code> 容器中，同时还有侧边栏、自动生成的编辑链接，以及上 / 下一篇文章的链接。如果你想要使用一个完全自定义的组件来代替当前的页面，你可以通过 frontmatter 来指定布局组件。</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"><span style="color:#E06C75;">layout</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">SpecialLayout</span></span>
<span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"></span></code></pre></div><p>这将会为当前的页面渲染 VuePress 中注册的 SpecialLayout 布局。</p>`,4),k={class:"hint-container note"},b=t('<p class="hint-container-title">注</p><p>主题只提供了 <code>Layout</code>，<code>404</code> 布局。</p><p>同时主题:</p><ul><li>在博客功能启用时提供 <code>Blog</code> 布局</li><li>在幻灯片功能启用时提供 <code>Slide</code> 布局</li></ul>',4),v=t(`<h2 id="自定义容器-class" tabindex="-1"><a class="header-anchor" href="#自定义容器-class" aria-hidden="true">#</a> 自定义容器 Class</h2><p>默认情况下，每个页面都会渲染在 class 为 <code>theme-container</code> 的 <code>div</code> 中。如果你需要对特定页面应用一些特殊样式，你可以通过在 frontmatter 中设置 <code>containerClass</code> 来额外指定一个类名</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"><span style="color:#E06C75;">containerClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">fancy-container</span></span>
<span class="line"><span style="color:#ABB2BF;">---</span></span>
<span class="line"></span></code></pre></div><p>这将会为当前的页面渲染在 <code>&lt;div class=&quot;theme-container fancy-container&quot; /&gt;</code> 中。</p>`,4);function C(A,F){const s=p("RouterLink");return l(),d("div",null,[h,e("div",u,[_,e("p",null,[a("图标的相关设置，详见 "),n(s,{to:"/zh/guide/interface/icon.html"},{default:o(()=>[a("图标支持")]),_:1})])]),m,e("p",null,[a("详见 "),n(s,{to:"/zh/guide/layout/breadcrumb.html"},{default:o(()=>[a("路径导航")]),_:1}),a(" 章节。")]),B,e("p",null,[a("详见 "),n(s,{to:"/zh/guide/feature/page-info.html"},{default:o(()=>[a("文章信息")]),_:1}),a(" 章节。")]),f,e("p",null,[a("详见 "),n(s,{to:"/zh/guide/feature/meta.html"},{default:o(()=>[a("页面元数据")]),_:1}),a(" 章节。")]),y,r(" TODO: Improve it "),g,e("p",null,[a("具体详情请见 "),n(s,{to:"/zh/guide/feature/comment.html"},{default:o(()=>[a("评论")]),_:1}),a(" 章节。")]),x,e("div",k,[b,e("p",null,[a("如果你想使用你自己的布局，详见 "),n(s,{to:"/zh/cookbook/advanced/extend.html"},{default:o(()=>[a("继承主题")]),_:1}),a("。")])]),v])}const E=c(i,[["render",C],["__file","page.html.vue"]]);export{E as default};
