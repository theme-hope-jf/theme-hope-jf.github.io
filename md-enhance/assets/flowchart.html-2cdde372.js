import{a2 as B,Y as h,Z as u,a3 as g,a0 as s,a1 as e,_ as n,$ as t,a4 as l,F as o}from"./framework-aea579b9.js";const b={},y=s("p",null,"Let the Markdown file support flow chart in your VuePress site.",-1),f={href:"http://flowchart.js.org/",target:"_blank",rel:"noopener noreferrer"},m=s("h2",{id:"config",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),e(" Config")],-1),v=s("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[s("pre",{class:"shiki one-dark-pro",style:{"background-color":"#282c34"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// .vuepress/config.ts")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C678DD"}},"import"),s("span",{style:{color:"#ABB2BF"}}," { "),s("span",{style:{color:"#E06C75"}},"mdEnhancePlugin"),s("span",{style:{color:"#ABB2BF"}}," } "),s("span",{style:{color:"#C678DD"}},"from"),s("span",{style:{color:"#ABB2BF"}}," "),s("span",{style:{color:"#98C379"}},'"vuepress-plugin-md-enhance"'),s("span",{style:{color:"#ABB2BF"}},";")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C678DD"}},"export"),s("span",{style:{color:"#ABB2BF"}}," "),s("span",{style:{color:"#C678DD"}},"default"),s("span",{style:{color:"#ABB2BF"}}," {")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"  "),s("span",{style:{color:"#E06C75"}},"plugins"),s("span",{style:{color:"#ABB2BF"}},": [")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"    "),s("span",{style:{color:"#61AFEF"}},"mdEnhancePlugin"),s("span",{style:{color:"#ABB2BF"}},"({")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"      "),s("span",{style:{color:"#7F848E","font-style":"italic"}},"// Enable flowchart")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"      "),s("span",{style:{color:"#E06C75"}},"flowchart"),s("span",{style:{color:"#ABB2BF"}},": "),s("span",{style:{color:"#D19A66"}},"true"),s("span",{style:{color:"#ABB2BF"}},",")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"    }),")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"  ],")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"};")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),A=s("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[s("pre",{class:"shiki one-dark-pro",style:{"background-color":"#282c34"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// .vuepress/config.js")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C678DD"}},"import"),s("span",{style:{color:"#ABB2BF"}}," { "),s("span",{style:{color:"#E06C75"}},"mdEnhancePlugin"),s("span",{style:{color:"#ABB2BF"}}," } "),s("span",{style:{color:"#C678DD"}},"from"),s("span",{style:{color:"#ABB2BF"}}," "),s("span",{style:{color:"#98C379"}},'"vuepress-plugin-md-enhance"'),s("span",{style:{color:"#ABB2BF"}},";")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C678DD"}},"export"),s("span",{style:{color:"#ABB2BF"}}," "),s("span",{style:{color:"#C678DD"}},"default"),s("span",{style:{color:"#ABB2BF"}}," {")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"  "),s("span",{style:{color:"#E06C75"}},"plugins"),s("span",{style:{color:"#ABB2BF"}},": [")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"    "),s("span",{style:{color:"#61AFEF"}},"mdEnhancePlugin"),s("span",{style:{color:"#ABB2BF"}},"({")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"      "),s("span",{style:{color:"#7F848E","font-style":"italic"}},"// Enable flowchart")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"      "),s("span",{style:{color:"#E06C75"}},"flowchart"),s("span",{style:{color:"#ABB2BF"}},": "),s("span",{style:{color:"#D19A66"}},"true"),s("span",{style:{color:"#ABB2BF"}},",")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"    }),")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"  ],")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ABB2BF"}},"};")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),F=l(`<h2 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h2><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- ↓ :preset is optional --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`flow:preset</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;!-- Your flowchart code here. --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span></code></pre></div><p>Available presets for now:</p><ul><li><code>vue</code> (default)</li><li><code>ant</code></li><li><code>pie</code></li></ul><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> Demo</h2>`,5),w=l(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">\`\`\`flow</span></span>
<span class="line"><span style="color:#ABB2BF;">st=&gt;start: Start|past:&gt;http://www.google.com[blank]</span></span>
<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End|future:&gt;http://www.google.com</span></span>
<span class="line"><span style="color:#ABB2BF;">op1=&gt;operation: My Operation|past</span></span>
<span class="line"><span style="color:#ABB2BF;">op2=&gt;operation: Stuff|current</span></span>
<span class="line"><span style="color:#ABB2BF;">sub1=&gt;subroutine: My Subroutine|invalid</span></span>
<span class="line"><span style="color:#ABB2BF;">cond=&gt;condition: Yes</span></span>
<span class="line"><span style="color:#ABB2BF;">or No?|approved:&gt;http://www.google.com</span></span>
<span class="line"><span style="color:#ABB2BF;">c2=&gt;condition: Good idea|rejected</span></span>
<span class="line"><span style="color:#ABB2BF;">io=&gt;inputoutput: catch something...|future</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">st-&gt;op1(right)-&gt;cond</span></span>
<span class="line"><span style="color:#ABB2BF;">cond(yes, right)-&gt;c2</span></span>
<span class="line"><span style="color:#ABB2BF;">cond(no)-&gt;sub1(left)-&gt;op1</span></span>
<span class="line"><span style="color:#ABB2BF;">c2(yes)-&gt;io-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">c2(no)-&gt;op2-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flowchart-intro" tabindex="-1"><a class="header-anchor" href="#flowchart-intro" aria-hidden="true">#</a> Flowchart Intro</h2><h3 id="node-types" tabindex="-1"><a class="header-anchor" href="#node-types" aria-hidden="true">#</a> Node Types</h3><p>Defines the shape that the node will take.</p><h3 id="start-end" tabindex="-1"><a class="header-anchor" href="#start-end" aria-hidden="true">#</a> Start &amp; End</h3><p>Used as the first node where flows start from. Default text is <code>Start</code>.</p><ul><li><code>[Variable]-&gt;start: [Text]</code></li></ul><p>Used as the last node where a flow ends. Default text is <code>End</code>.</p><ul><li><code>[Variable]-&gt;end: [Text]</code></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">\`\`\`flow</span></span>
<span class="line"><span style="color:#ABB2BF;">st=&gt;start: Start</span></span>
<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">st-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span></code></pre></div>`,10),k=l('<h3 id="operation" tabindex="-1"><a class="header-anchor" href="#operation" aria-hidden="true">#</a> Operation</h3><p>Indicates that an operation needs to happen in the flow.</p><ul><li><code>[Variable]-&gt;operation: [Text]</code></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">```flow</span></span>\n<span class="line"><span style="color:#ABB2BF;">process=&gt;operation: Operation</span></span>\n<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#ABB2BF;">process-&gt;e</span></span>\n<span class="line"><span style="color:#ABB2BF;">```</span></span>\n<span class="line"></span></code></pre></div>',4),x=l('<h3 id="input-output" tabindex="-1"><a class="header-anchor" href="#input-output" aria-hidden="true">#</a> Input / Output</h3><p>Indicates that IO happens in a flow.</p><ul><li><code>[Variable]-&gt;inputoutput: [Text]</code></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">```flow</span></span>\n<span class="line"><span style="color:#ABB2BF;">process=&gt;inputoutput: Inputoutput</span></span>\n<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#ABB2BF;">process-&gt;e</span></span>\n<span class="line"><span style="color:#ABB2BF;">```</span></span>\n<span class="line"></span></code></pre></div>',4),q=l('<h3 id="subroutine" tabindex="-1"><a class="header-anchor" href="#subroutine" aria-hidden="true">#</a> Subroutine</h3><p>Indicates that a subroutine happens in the flow and that there should be another flowchart that documents this subroutine.</p><ul><li><code>[Variable]-&gt;subroutine: [Text]</code></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">```flow</span></span>\n<span class="line"><span style="color:#ABB2BF;">process=&gt;subroutine: Subroutine</span></span>\n<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#ABB2BF;">process-&gt;e</span></span>\n<span class="line"><span style="color:#ABB2BF;">```</span></span>\n<span class="line"></span></code></pre></div>',4),V=l(`<h3 id="condition" tabindex="-1"><a class="header-anchor" href="#condition" aria-hidden="true">#</a> Condition</h3><p>Allows for a conditional or logical statement to direct the flow into one of two or more paths.</p><ul><li><p><code>[Variable]-&gt;condition: [Text]</code></p></li><li><p><code>[Variable]([yesText])-&gt;[Position]</code></p></li><li><p><code>[Variable]([noText])-&gt;[Position]</code></p></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">\`\`\`flow</span></span>
<span class="line"><span style="color:#ABB2BF;">cond=&gt;condition: Process?</span></span>
<span class="line"><span style="color:#ABB2BF;">process=&gt;operation: Process</span></span>
<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">cond(yes)-&gt;process-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">cond(no)-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span></code></pre></div>`,4),E=l(`<h3 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel" aria-hidden="true">#</a> Parallel</h3><p>Allows for multiple flows to happen simultaneously.</p><ul><li><code>[Variable]-&gt;parallel: [Text]</code></li><li><code>[Variable](path1, direction)-&gt;[Position]</code></li><li><code>[Variable](path1, direction)-&gt;[Position]</code></li></ul><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">\`\`\`flow</span></span>
<span class="line"><span style="color:#ABB2BF;">para=&gt;parallel: parallel tasks</span></span>
<span class="line"><span style="color:#ABB2BF;">process=&gt;operation: Process</span></span>
<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">para(path1, bottom)-&gt;process-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">para(path2)-&gt;e</span></span>
<span class="line"><span style="color:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span></code></pre></div>`,4),C=l(`<h2 id="connections" tabindex="-1"><a class="header-anchor" href="#connections" aria-hidden="true">#</a> Connections</h2><p>Connections are defined in their own section below the node definitions.</p><p>The <code>-&gt;</code> operator specifies a connection from one node to another like <code>nodeVar1-&gt;nodeVar2-&gt;nodeVar3</code>.</p><p>Not all nodes need to be specified in one string and can be separated like so</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">nodeVar1-&gt;nodeVar2</span></span>
<span class="line"><span style="color:#ABB2BF;">nodeVar2-&gt;nodeVar3</span></span>
<span class="line"></span></code></pre></div><p>Connection syntax is as follows:</p><p><code>&lt;node variable name&gt;[(&lt;specification1&gt;[, &lt;specification2])]-&gt;&lt;node variable name&gt;[[(&lt;specification1&gt;[, &lt;specification2])]-&gt;&lt;node variable name&gt;]</code></p><p>Items in <code>[]</code> are optional.</p><h3 id="directions" tabindex="-1"><a class="header-anchor" href="#directions" aria-hidden="true">#</a> Directions</h3><p>The following directions are available and define the direction the connection will leave the node from. If there are more than one specifiers, it is always the last. All nodes have a default direction making this an optional specification. <code>&lt;direction&gt;</code> will be used and one of the below list should be used in its place.</p><ul><li><code>left</code></li><li><code>right</code></li><li><code>top</code></li><li><code>bottom</code></li></ul><h3 id="node-specific-specifiers-by-type" tabindex="-1"><a class="header-anchor" href="#node-specific-specifiers-by-type" aria-hidden="true">#</a> Node Specific Specifiers by Type</h3><p>Each node variables has optional specifiers, like direction, and some have special specifiers depending on the node type that are defined below. Specifiers are added after the variable name in <code>()</code> and separated with <code>,</code> like <code>nodeVar(spec1, spec2)</code>.</p><ul><li><p><strong>start</strong><strong>operation</strong><strong>inputoutput</strong><strong>subroutine</strong></p><p>Optional direction</p><p><code>startVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>operationVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>inputoutputVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>subroutineVar(&lt;direction&gt;)-&gt;nextNode</code></p></li><li><p><strong>condition</strong></p><p>Required logical specification of <code>yes</code> or <code>no</code></p><p>Optional direction</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">conditionalVar(yes, &lt;direction&gt;)-&gt;nextNode1</span></span>
<span class="line"><span style="color:#ABB2BF;">conditionalVar(no, &lt;direction&gt;)-&gt;nextNode2</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>parallel</strong></p><p>Required path specification of <code>path1</code>, <code>path2</code>, or <code>path3</code></p><p>Optional direction</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">parallelVar(path1, &lt;direction&gt;)-&gt;nextNode1</span></span>
<span class="line"><span style="color:#ABB2BF;">parallelVar(path2, &lt;direction&gt;)-&gt;nextNode2</span></span>
<span class="line"><span style="color:#ABB2BF;">parallelVar(path3, &lt;direction&gt;)-&gt;nextNode3</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h3><p>A external link can be added to a node with the <code>:&gt;</code> operator.</p><p>The <code>st</code> node is linked with <code>http://www.google.com</code> and will open a new tab because <code>[blank]</code> is at the end of the URL.</p><p>The <code>e</code> node is linked with <code>http://www.yahoo.com</code> and will cause the page to navigate to that page instead of opening a new tab.</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">st=&gt;start: Start:&gt;http://www.google.com[</span><span style="color:#61AFEF;">blank</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">e=&gt;end: End:&gt;http://www.yahoo.com</span></span>
<span class="line"></span></code></pre></div><h2 id="advice" tabindex="-1"><a class="header-anchor" href="#advice" aria-hidden="true">#</a> Advice</h2><p>Symbols that should possibly not be used in the text: <code>=&gt;</code> and <code>-&gt;</code> and <code>:&gt;</code> and <code>|</code> and <code>@&gt;</code> and <code>:$</code></p><p>To emphasize a specific path in your flowchart, you can define it like this:</p><div class="language-markdown" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">st@&gt;op1({&quot;stroke&quot;:&quot;Red&quot;})@&gt;cond({&quot;stroke&quot;:&quot;Red&quot;,&quot;stroke-width&quot;:6,&quot;arrow-end&quot;:&quot;classic-wide-long&quot;})@&gt;c2({&quot;stroke&quot;:&quot;Red&quot;})@&gt;op2({&quot;stroke&quot;:&quot;Red&quot;})@&gt;e({&quot;stroke&quot;:&quot;Red&quot;})</span></span>
<span class="line"></span></code></pre></div>`,23);function S(_,I){const i=o("ExternalLinkIcon"),c=o("CodeTabs"),a=o("FlowChart");return h(),u("div",null,[y,g(" more "),s("p",null,[e("This plugin is using "),s("a",f,[e("flowchart.js"),n(i)]),e(" to support this feature.")]),m,n(c,{id:"10",data:[{title:"TS"},{title:"JS"}],"tab-id":"language"},{tab0:t(({title:p,value:r,isActive:d})=>[v]),tab1:t(({title:p,value:r,isActive:d})=>[A]),_:1}),F,n(a,{id:"flowchart-45",code:"eJx1ULFOwzAQ3f0VHotEUrWjpZgJMQFDJoQYXPuSGFKfZZ8bVfLHY6dQwdDlrHd+7927i9TJSCqQ4H19sleRhJyIvNhul2VpR8Rxhlbj8f0wK/f1waCT4Izgj87kIVEKcEPA0O86iR6CIotO8Oczf/1F66TC2P9j9JSGIesUAjhiMR2KQakBE1kHq0N/hdm6k5qtYRqd6WSt9mLzBpFh4C/4kJX3AU9gbmXUJcAf5ROi4daAygE+QRMYZrGT1vlEZWqpgmtFeuIRj0CTdWPbtj93YCxSU9bZbYIdJ7prVuc13uYM8Z5f2/tL02EBdcvNDEP9KNqSqJILsNhIqHCllVNV+A2yapmT",preset:"vue"}),n(a,{id:"flowchart-46",code:"eJx1ULFOwzAQ3f0VHotEUrWjpZgJMQFDJoQYXPuSGFKfZZ8bVfLHY6dQwdDlrHd+7927i9TJSCqQ4H19sleRhJyIvNhul2VpR8Rxhlbj8f0wK/f1waCT4Izgj87kIVEKcEPA0O86iR6CIotO8Oczf/1F66TC2P9j9JSGIesUAjhiMR2KQakBE1kHq0N/hdm6k5qtYRqd6WSt9mLzBpFh4C/4kJX3AU9gbmXUJcAf5ROi4daAygE+QRMYZrGT1vlEZWqpgmtFeuIRj0CTdWPbtj93YCxSU9bZbYIdJ7prVuc13uYM8Z5f2/tL02EBdcvNDEP9KNqSqJILsNhIqHCllVNV+A2yapmT",preset:"ant"}),n(a,{id:"flowchart-47",code:"eJx1ULFOwzAQ3f0VHotEUrWjpZgJMQFDJoQYXPuSGFKfZZ8bVfLHY6dQwdDlrHd+7927i9TJSCqQ4H19sleRhJyIvNhul2VpR8Rxhlbj8f0wK/f1waCT4Izgj87kIVEKcEPA0O86iR6CIotO8Oczf/1F66TC2P9j9JSGIesUAjhiMR2KQakBE1kHq0N/hdm6k5qtYRqd6WSt9mLzBpFh4C/4kJX3AU9gbmXUJcAf5ROi4daAygE+QRMYZrGT1vlEZWqpgmtFeuIRj0CTdWPbtj93YCxSU9bZbYIdJ7prVuc13uYM8Z5f2/tL02EBdcvNDEP9KNqSqJILsNhIqHCllVNV+A2yapmT",preset:"pie"}),w,n(a,{id:"flowchart-82",code:"eJwrLrG1Ky5JLCqxUggGUVyptnapeSlWCq55KVxcxSW6dqlcAOP4C2A=",preset:"vue"}),k,n(a,{id:"flowchart-97",code:"eJwrKMpPTi0utrXLL0gtSizJzM+zUvCHMblSbe1S81KsFFzzUri4oEp17VK5ACXfEtY=",preset:"vue"}),x,n(a,{id:"flowchart-112",code:"eJwrKMpPTi0utrXLzCsoLckvLQGSVgqeCA5Xqq1dal6KlYJrXgoXF1S5rl0qFwCSlRT2",preset:"vue"}),q,n(a,{id:"flowchart-127",code:"eJwrKMpPTi0utrUrLk0qyi8tycxLtVIIhrO5Um3tUvNSrBRc81K4uKCKde1SuQBZbhPU",preset:"vue"}),V,n(a,{id:"flowchart-152",code:"eJxLzs9LsbUDkZklmfl5VgoBRfnJqcXF9lwFEIatXX5BalEiiiRXqq1dal6KlYJrXgoXF0izRmVqsaauHVSPrl0qRDQvHyiYygUAPWgiyQ==",preset:"vue"}),E,n(a,{id:"flowchart-177",code:"eJxFizEKgDAMRfecIqOCDjoWms3dK0QNKNamtLk/Kioun897vMSZPd0bggSH30PjshdIWWcpxZMmyWybRofjw0A8SVwcDnEBuLsqsa1dg5Oa6VG39NYtye/7iwucDNwpNA==",preset:"vue"}),C])}const T=B(b,[["render",S],["__file","flowchart.html.vue"]]);export{T as default};
